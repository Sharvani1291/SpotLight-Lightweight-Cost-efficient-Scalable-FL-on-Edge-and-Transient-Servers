# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import edge_pb2 as edge__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edge_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EdgeLayerAggregatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AggregateAndUpdateModel = channel.unary_unary(
                '/grpc.edge.EdgeLayerAggregatorService/AggregateAndUpdateModel',
                request_serializer=edge__pb2.AggregatedWeights.SerializeToString,
                response_deserializer=edge__pb2.Ack.FromString,
                _registered_method=True)
        self.UpdateModel = channel.unary_unary(
                '/grpc.edge.EdgeLayerAggregatorService/UpdateModel',
                request_serializer=edge__pb2.AggregatedWeights.SerializeToString,
                response_deserializer=edge__pb2.Ack.FromString,
                _registered_method=True)
        self.GetGlobalModel = channel.unary_unary(
                '/grpc.edge.EdgeLayerAggregatorService/GetGlobalModel',
                request_serializer=edge__pb2.Empty.SerializeToString,
                response_deserializer=edge__pb2.ModelWeights.FromString,
                _registered_method=True)
        self.AddNewAggregator = channel.unary_unary(
                '/grpc.edge.EdgeLayerAggregatorService/AddNewAggregator',
                request_serializer=edge__pb2.AggregatorInfo.SerializeToString,
                response_deserializer=edge__pb2.Ack.FromString,
                _registered_method=True)


class EdgeLayerAggregatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AggregateAndUpdateModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGlobalModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNewAggregator(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EdgeLayerAggregatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AggregateAndUpdateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateAndUpdateModel,
                    request_deserializer=edge__pb2.AggregatedWeights.FromString,
                    response_serializer=edge__pb2.Ack.SerializeToString,
            ),
            'UpdateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateModel,
                    request_deserializer=edge__pb2.AggregatedWeights.FromString,
                    response_serializer=edge__pb2.Ack.SerializeToString,
            ),
            'GetGlobalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGlobalModel,
                    request_deserializer=edge__pb2.Empty.FromString,
                    response_serializer=edge__pb2.ModelWeights.SerializeToString,
            ),
            'AddNewAggregator': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNewAggregator,
                    request_deserializer=edge__pb2.AggregatorInfo.FromString,
                    response_serializer=edge__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.edge.EdgeLayerAggregatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('grpc.edge.EdgeLayerAggregatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EdgeLayerAggregatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AggregateAndUpdateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.EdgeLayerAggregatorService/AggregateAndUpdateModel',
            edge__pb2.AggregatedWeights.SerializeToString,
            edge__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.EdgeLayerAggregatorService/UpdateModel',
            edge__pb2.AggregatedWeights.SerializeToString,
            edge__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGlobalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.EdgeLayerAggregatorService/GetGlobalModel',
            edge__pb2.Empty.SerializeToString,
            edge__pb2.ModelWeights.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddNewAggregator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.EdgeLayerAggregatorService/AddNewAggregator',
            edge__pb2.AggregatorInfo.SerializeToString,
            edge__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ModelServiceStub(object):
    """gRPC service definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetModel = channel.unary_unary(
                '/grpc.edge.ModelService/GetModel',
                request_serializer=edge__pb2.ModelRequest.SerializeToString,
                response_deserializer=edge__pb2.ModelResponse.FromString,
                _registered_method=True)
        self.UpdateModel = channel.unary_unary(
                '/grpc.edge.ModelService/UpdateModel',
                request_serializer=edge__pb2.WeightsUpdate.SerializeToString,
                response_deserializer=edge__pb2.UpdateResponse.FromString,
                _registered_method=True)
        self.ReceiveAggregatedWeightsFromL3 = channel.unary_unary(
                '/grpc.edge.ModelService/ReceiveAggregatedWeightsFromL3',
                request_serializer=edge__pb2.AggregatedWeights.SerializeToString,
                response_deserializer=edge__pb2.Ack.FromString,
                _registered_method=True)
        self.ReceiveAggregatedWeightsFromEdge = channel.unary_unary(
                '/grpc.edge.ModelService/ReceiveAggregatedWeightsFromEdge',
                request_serializer=edge__pb2.AggregatedWeights.SerializeToString,
                response_deserializer=edge__pb2.Ack.FromString,
                _registered_method=True)


class ModelServiceServicer(object):
    """gRPC service definitions
    """

    def GetModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveAggregatedWeightsFromL3(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveAggregatedWeightsFromEdge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModel,
                    request_deserializer=edge__pb2.ModelRequest.FromString,
                    response_serializer=edge__pb2.ModelResponse.SerializeToString,
            ),
            'UpdateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateModel,
                    request_deserializer=edge__pb2.WeightsUpdate.FromString,
                    response_serializer=edge__pb2.UpdateResponse.SerializeToString,
            ),
            'ReceiveAggregatedWeightsFromL3': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveAggregatedWeightsFromL3,
                    request_deserializer=edge__pb2.AggregatedWeights.FromString,
                    response_serializer=edge__pb2.Ack.SerializeToString,
            ),
            'ReceiveAggregatedWeightsFromEdge': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveAggregatedWeightsFromEdge,
                    request_deserializer=edge__pb2.AggregatedWeights.FromString,
                    response_serializer=edge__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.edge.ModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('grpc.edge.ModelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """gRPC service definitions
    """

    @staticmethod
    def GetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.ModelService/GetModel',
            edge__pb2.ModelRequest.SerializeToString,
            edge__pb2.ModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.ModelService/UpdateModel',
            edge__pb2.WeightsUpdate.SerializeToString,
            edge__pb2.UpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveAggregatedWeightsFromL3(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.ModelService/ReceiveAggregatedWeightsFromL3',
            edge__pb2.AggregatedWeights.SerializeToString,
            edge__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReceiveAggregatedWeightsFromEdge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/grpc.edge.ModelService/ReceiveAggregatedWeightsFromEdge',
            edge__pb2.AggregatedWeights.SerializeToString,
            edge__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
