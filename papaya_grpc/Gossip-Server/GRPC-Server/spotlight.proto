    syntax = "proto3";

    package spotlight;

    // Federated Learning Service definition
    service FederatedLearningService {
        rpc GetGlobalModel (ModelVersion) returns (ModelResponse);
        rpc SendModelWeights (ModelWeights) returns (Ack);
        rpc registerClient(clientInfo) returns (Ack);
    }

    //adding this to registerClient
    message clientInfo{
        string clientId = 1;
    }

    // Request message for GetGlobalModel
    message ModelVersion {
        string version = 1; // Client's requested model version
    }

    // Response message for GetGlobalModel
    message ModelResponse {
        repeated float weights = 1;   // Global model weights as a flat array
        string version = 2;           // Global model version
    }

    // Request message for SendModelWeights
    message ModelWeights {

        repeated float weights = 1;   // Client model weights as a flat array
        int32 num_samples = 2;        // Number of samples used for training
        float timestamp = 3;          // Timestamp of the client
        int32 version = 4;            // Version of the model used by the client 
        string clientId=5;
    }

    // Acknowledgement message for SendModelWeights
    message Ack {
        bool success = 1;             // Whether the update was successful
        string message = 2;
        repeated float weights=3;           // Additional message
    }
